"use client";

import { useEffect, useState } from "react";

interface Chapter {
  title: string;
  start: number;
}

interface SummaryProps {
  videoId: string;
  onSeek?: (time: number) => void;
  initialAiData?: {
    title?: string | null;
    summary?: string | null;
    chapters?: Chapter[] | null;
    processing?: boolean;
  };
}

const formatTime = (time: number) => {
  const minutes = Math.floor(time / 60);
  const seconds = Math.floor(time % 60);
  return `${minutes.toString().padStart(2, "0")}:${seconds
    .toString()
    .padStart(2, "0")}`;
};

const SkeletonLoader = () => (
  <div className="p-4 space-y-6 animate-pulse">
    <div>
      <div className="h-6 w-24 bg-gray-200 rounded mb-3"></div>
      <div className="h-3 w-32 bg-gray-100 rounded mb-4"></div>
      <div className="space-y-3">
        <div className="h-4 bg-gray-200 rounded w-full"></div>
        <div className="h-4 bg-gray-200 rounded w-5/6"></div>
        <div className="h-4 bg-gray-200 rounded w-4/5"></div>
        <div className="h-4 bg-gray-200 rounded w-full"></div>
        <div className="h-4 bg-gray-200 rounded w-3/4"></div>
      </div>
    </div>

    <div>
      <div className="h-6 w-24 bg-gray-200 rounded mb-4"></div>
      <div className="space-y-2">
        {[1, 2, 3, 4].map((i) => (
          <div key={i} className="flex items-center p-2">
            <div className="h-4 w-12 bg-gray-200 rounded mr-3"></div>
            <div className="h-4 bg-gray-200 rounded flex-1"></div>
          </div>
        ))}
      </div>
    </div>
  </div>
);

export const Summary: React.FC<SummaryProps> = ({
  videoId,
  onSeek,
  initialAiData,
}) => {
  const [aiData, setAiData] = useState<{
    title?: string | null;
    summary?: string | null;
    chapters?: Chapter[] | null;
    processing?: boolean;
  } | null>(initialAiData || null);
  const [isLoading, setIsLoading] = useState(
    !initialAiData || initialAiData.processing === true
  );

  useEffect(() => {
    console.log("[Summary] Received initialAiData update:", initialAiData);
    if (initialAiData) {
      setAiData(initialAiData);
      setIsLoading(initialAiData.processing === true);
    } else {
      setIsLoading(true);
    }
  }, [initialAiData]);

  const handleSeek = (time: number) => {
    if (onSeek) {
      onSeek(time);
    }
  };

  console.log("[Summary] Current state:", { isLoading, aiData, initialAiData });

  if (isLoading || aiData?.processing) {
    return (
      <div className="flex flex-col h-full">
        <div className="overflow-y-auto flex-1">
          <SkeletonLoader />
        </div>
      </div>
    );
  }

  if (!aiData?.summary && (!aiData?.chapters || aiData.chapters.length === 0)) {
    return (
      <div className="flex flex-col justify-center items-center p-8 h-full text-center">
        <div className="space-y-2 text-gray-300">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="mx-auto w-8 h-8"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={1.5}
              d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
            />
          </svg>
          <h3 className="text-sm font-medium text-gray-12">
            No summary available
          </h3>
          <p className="text-sm text-gray-10">
            AI summary has not been generated for this video yet.
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-full">
      <div className="overflow-y-auto flex-1">
        <div className="p-4 space-y-6">
          {aiData?.summary && (
            <div>
              <h3 className="text-lg font-medium">Summary</h3>
              <div className="mb-2">
                <span className="text-xs font-semibold text-gray-8">
                  Generated by Cap AI
                </span>
              </div>
              <p className="text-sm whitespace-pre-wrap text-gray-12">
                {aiData.summary}
              </p>
            </div>
          )}

          {aiData?.chapters && aiData.chapters.length > 0 && (
            <div className={aiData?.summary ? "mt-6" : ""}>
              <h3 className="mb-2 text-lg font-medium">Chapters</h3>
              <div className="divide-y">
                {aiData.chapters.map((chapter) => (
                  <div
                    key={chapter.start}
                    className="p-2 cursor-pointer hover:bg-gray-100 rounded transition-colors flex items-center"
                    onClick={() => handleSeek(chapter.start)}
                  >
                    <span className="text-xs text-gray-500 w-16">
                      {formatTime(chapter.start)}
                    </span>
                    <span className="ml-2 text-sm">{chapter.title}</span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
